pca_result <- as.data.frame(pca_summary$cont)
plot_data <- as.data.frame((pca_result[c("Proportion Explained"),]))
plot_data$component <- rownames(plot_data)
ggplot(plot_data, aes( component , `Proportion Explained`)) + geom_bar(stat = "identity") + theme_bw()
pca_summary <- summary(mouse_pca)
pca_result <- as.data.frame(pca_summary$cont)
plot_data <- as.data.frame(t(pca_result[c("Proportion Explained"),]))
plot_data$component <- rownames(plot_data)
ggplot(plot_data, aes( component , `Proportion Explained`)) + geom_bar(stat = "identity") + theme_bw()
pca_summary <- summary(mouse_pca)
pca_result <- as.data.frame(pca_summary$cont)
plot_data <- as.data.frame(pca_result[c("Proportion Explained"),])
plot_data$component <- rownames(plot_data)
ggplot(plot_data, aes( component , `Proportion Explained`)) + geom_bar(stat = "identity") + theme_bw()
pca_summary <- summary(mouse_pca)
pca_result <- as.data.frame(pca_summary$cont)
plot_data <- as.data.frame(t(pca_result[c("Proportion Explained"),]))
plot_data$component <- rownames(plot_data)
ggplot(plot_data, aes( component , `Proportion Explained`)) + geom_bar(stat = "identity") + theme_bw()
pca_summary <- summary(mouse_pca)
pca_result <- as.data.frame(pca_summary$cont)
plot_data <- as.data.frame(t(pca_result[c("Proportion Explained"),]))
plot_data$component <- c(1:75)
ggplot(plot_data, aes( component , `Proportion Explained`)) + geom_bar(stat = "identity") + theme_bw()
?t
?n
#Привести в божеский вид
pca_summary <- summary(mouse_pca)
pca_result <- as.data.frame(pca_summary$cont)
library("readxl")
library(dplyr)
library(tidyr)
library(stats)
library(ggplot2)
library(car)
library(knitr)
library(rstatix)
library(evaluator)
library(multcomp)
library(vegan)
theme_set(theme_bw())
mouse_data <- read_excel('Data_Cortex_Nuclear.xls')
count(mouse_data)
mouses <-  mouse_data %>% separate(col = MouseID, into = c("MouseID", "measurement"), sep = "_")
str(mouses)
mouses$class <- as.factor(mouses$class)
mouses$Behavior <- as.factor(mouses$Behavior)
mouses$Treatment <- as.factor(mouses$Treatment)
mouses$Genotype <- as.factor(mouses$Genotype)
mouses$MouseID <- as.factor(mouses$MouseID)
mouses %>% group_by(class) %>%  count()
mouse_na <- colSums(is.na(mouses))
sum(is.na(mouses))
as.table(mouse_na)
#
mouses_without_na <- na.omit(mouses)
count(mouses_without_na)
BDNF_mean <- mouses %>%
group_by(class, MouseID) %>%
get_summary_stats(BDNF_N, type = "mean_sd")
BDNF_mean
BDNF_N_without_NA <- mouses  %>% filter( !is.na(BDNF_N))
ggplot(BDNF_N_without_NA, aes(class, BDNF_N, color = class)) + stat_summary(fun.data = "mean_cl_normal") + ggtitle(label = "BDNF expression versus class plot")
fit <- lm(BDNF_N ~ class , BDNF_N_without_NA)
fit2 <- lm(mean ~ class, BDNF_mean)
simple_diag <- fortify(fit)
simple_diag2 <- fortify(fit2)
ggplot(simple_diag, aes(x = 1:nrow(simple_diag), y = .cooksd)) +
geom_bar(stat = 'identity')
ggplot(simple_diag2, aes(x = 1:nrow(simple_diag2), y = .cooksd)) +
geom_bar(stat = 'identity')
ggplot(data = simple_diag, aes(x = class, y = .stdresid, colour = class)) +
geom_boxplot() + geom_hline(yintercept = 0)
ggplot(data = simple_diag2, aes(x = class, y = .stdresid, colour = class)) +
geom_boxplot() + geom_hline(yintercept = 0)
qqPlot(fit, id = FALSE)
qqPlot(fit2, id = FALSE)
res.aov <- anova_test(
data = BDNF_N_without_NA, dv = BDNF_N, wid = MouseID,
between = class
)
res.aov
res.aov2 <- anova_test(
data = BDNF_mean, dv = mean, wid = MouseID,
between = class
)
res.aov2
fit_inter <- lm(BDNF_N ~ class , data = BDNF_N_without_NA)
dat_tukey <- glht(fit_inter, linfct = mcp(class = 'Tukey'))
summary(dat_tukey)
fit_inter2 <- lm(mean ~ class , data = BDNF_mean)
dat_tukey2 <- glht(fit_inter2, linfct = mcp(class = 'Tukey'))
summary(dat_tukey2)
lin_mod <- lm(ERBB4_N ~ . - MouseID - measurement - Genotype - Treatment -Behavior - class  , mouses)
summary(lin_mod)
alias( lm( ERBB4_N ~ . - MouseID - measurement - Genotype - Treatment -Behavior - class , mouses ) )
lin_mod <- update(lin_mod, .~. - pS6_N)
head(vif(lin_mod))
lin_mod <- data.frame(fortify(lin_mod))
gg_resid <- ggplot(data = lin_mod, aes(x = .fitted, y = .stdresid)) +
geom_point() +
geom_hline(yintercept = 0) +
geom_smooth(method = "lm") +
geom_hline(yintercept = 2, color = "red") +
geom_hline(yintercept = -2, color = "red") +
ggtitle("Plot of residuals from predicted values")
gg_resid
qqPlot(lin_mod$.stdresid)
lin_mod2 <- lm(ERBB4_N ~ PSD95_N + BAX_N + Tau_N  + pPKCG_N , mouses)
summary(lin_mod2)
vif(lin_mod2)
lin_mod2 <- data.frame(fortify(lin_mod2))
gg_resid2 <- ggplot(data = lin_mod2, aes(x = .fitted, y = .stdresid)) +
geom_point() +
geom_hline(yintercept = 0) +
geom_smooth(method = "lm") +
geom_hline(yintercept = 2, color = "red") +
geom_hline(yintercept = -2, color = "red") +
ggtitle("Plot of residuals from predicted values")
gg_resid2
qqPlot(lin_mod2$.stdresid)
model <- lm(ERBB4_N ~ PSD95_N + BAX_N + Tau_N  + pPKCG_N , data = mouses)
# Dataset for model prediction
MyData <- data.frame(
PSD95_N = seq(min(mouses$PSD95_N), max(mouses$PSD95_N), length.out = 500),
BAX_N = mean(mouses$BAX_N),
pPKCG_N = mean(mouses$pPKCG_N),
Tau_N = mean(mouses$Tau_N)
)
# Predicted values
Predictions <- predict(model, newdata = MyData,  interval = 'confidence')
MyData <- data.frame(MyData, Predictions)
# Model prediction plot
Pl_predict <- ggplot(MyData, aes(x = PSD95_N, y = fit)) +
geom_ribbon(alpha = 0.2, aes(ymin = lwr, ymax = upr)) +
geom_line() +
geom_point(data= mouses, alpha = 0.2, color = 'plum4' , aes(y = ERBB4_N)) +
ggtitle("Multiple model") +
labs(y="ERBB4_N - fitted")
Pl_predict
mice_set <- mouses_without_na[, -c(1, 2, 79, 80, 81,82)]
str(mice_set)
table(mice_set$class)
mouse_pca <- rda(mice_set[, -77], scale = T)
head(summary(mouse_pca))
df_scores <- data.frame(mice_set,
scores(mouse_pca, display = "sites", choices = c(1, 2, 3,4), scaling = "sites"))
p_scores <- ggplot(df_scores, aes(x = PC2, y = PC4)) +
geom_point(aes( color = class), alpha = 0.5) +
coord_equal(xlim = c(-1.2, 1.2), ylim = c(-1.2, 1.2)) + ggtitle(label = "Ординация в осях главных компонент") + theme_bw()
p_scores
df_scores <- data.frame(mice_set,
scores(mouse_pca, display = "sites", choices = c(1:5), scaling = 1))
ggplot(df_scores, aes(x = PC4, y = PC2, colour = class)) +
geom_point() + ggtitle("Ординация в пространстве PC и PC")
df_scores <- data.frame(mice_set,
scores(mouse_pca, display = "sites", choices = c(1:5), scaling = 1))
ggplot(df_scores, aes(x = PC1, y = PC2, colour = class)) +
geom_point() + ggtitle("Ординация в пространстве PC и PC")
df_scores <- data.frame(mice_set,
scores(mouse_pca, display = "sites", choices = c(1:5), scaling = 1))
ggplot(df_scores, aes(x = PC1, y = PC3, colour = class)) +
geom_point() + ggtitle("Ординация в пространстве PC и PC")
df_scores <- data.frame(mice_set,
scores(mouse_pca, display = "sites", choices = c(1:5), scaling = 1))
ggplot(df_scores, aes(x = PC3, y = PC5, colour = class)) +
geom_point() + ggtitle("Ординация в пространстве PC и PC")
screeplot(mouse_pca, type = "lines", bstick = TRUE) # график собственных чисел
biplot(mouse_pca, scaling = "species", display = "species")
biplot(mouse_pca, display = "species", scaling = 2, choices = c(1,4))
biplot(mouse_pca, display = "species", scaling = 2, choices = c(1,5))
biplot(mouse_pca, display = "species", scaling = 2, choices = c(2,3))
biplot(mouse_pca, display = "species", scaling = 2, choices = c(2,4))
biplot(mouse_pca, display = "species", scaling = 2, choices = c(2,5))
biplot(mouse_pca, display = "species", scaling = 2, choices = c(3,5))
biplot(mouse_pca, display = "species", scaling = 2, choices = c(3,4))
biplot(mouse_pca, display = "species", scaling = 2, choices = c(4,5))
#Привести в божеский вид
pca_summary <- summary(mouse_pca)
pca_result <- as.data.frame(pca_summary$cont)
plot_data <- as.data.frame(t(pca_result[c("Proportion Explained"),]))
plot_data$component <- rownames(plot_data)
ggplot(plot_data, aes( numeric(component) , `Proportion Explained`)) + geom_bar(stat = "identity") + theme_bw()
#Привести в божеский вид
pca_summary <- summary(mouse_pca)
pca_result <- as.data.frame(pca_summary$cont)
plot_data <- as.data.frame(t(pca_result[c("Proportion Explained"),]))
plot_data$component <- rownames(plot_data)
ggplot(plot_data, aes(component , `Proportion Explained`)) + geom_bar(stat = "identity") + theme_bw()
#Привести в божеский вид
pca_summary <- summary(mouse_pca)
pca_result <- as.data.frame(pca_summary$cont)
plot_data <- as.data.frame(t(pca_result[c("Proportion Explained"),]))
plot_data$component <- с(1:75)
#Привести в божеский вид
pca_summary <- summary(mouse_pca)
pca_result <- as.data.frame(pca_summary$cont)
plot_data <- as.data.frame(t(pca_result[c("Proportion Explained"),]))
plot_data$component <- c(1:75)
ggplot(plot_data, aes(component , `Proportion Explained`)) + geom_bar(stat = "identity") + theme_bw()
mice_set <- mouses_without_na[, -c(1, 2, 79, 80, 81,82)]
table(mice_set$class)
mouse_pca <- rda(mice_set[, -77], scale = T)
pca_summary <- summary(mouse_pca)
pca_result <- as.data.frame(pca_summary$cont)
plot_data <- as.data.frame(t(pca_result[c("Proportion Explained"),]))
plot_data$component <- c(1:75)
head(pca_summary$cont)
ggplot(plot_data, aes(component , `Proportion Explained`)) + geom_bar(stat = "identity") + theme_bw()
pca_summary <- summary(mouse_pca)
pca_result <- as.data.frame(pca_summary$cont)
plot_data <- as.data.frame(t(pca_result[c("Proportion Explained"),]))
plot_data$component <- c(1:75)
head(pca_summary$cont[c("Proportion Explained"),])
pca_summary <- summary(mouse_pca)
pca_result <- as.data.frame(pca_summary$cont)
plot_data <- as.data.frame(t(pca_result[c("Proportion Explained"),]))
plot_data$component <- c(1:75)
head(pca_summary$cont[("Proportion Explained"),])
pca_summary <- summary(mouse_pca)
pca_result <- as.data.frame(pca_summary$cont)
plot_data <- as.data.frame(t(pca_result[c("Proportion Explained"),]))
plot_data$component <- c(1:75)
head(pca_summary$cont["Proportion Explained")
pca_summary <- summary(mouse_pca)
pca_result <- as.data.frame(pca_summary$cont)
plot_data <- as.data.frame(t(pca_result[c("Proportion Explained"),]))
plot_data$component <- c(1:75)
head(pca_summary$cont("Proportion Explained")
ggplot(plot_data, aes(component , `Proportion Explained`)) + geom_bar(stat = "identity") + theme_bw()
pca_summary <- summary(mouse_pca)
pca_result <- as.data.frame(pca_summary$cont)
plot_data <- as.data.frame(t(pca_result[c("Proportion Explained"),]))
plot_data$component <- c(1:75)
head(pca_summary$cont["Proportion Explained"])
ggplot(plot_data, aes(component , `Proportion Explained`)) + geom_bar(stat = "identity") + theme_bw()
pca_summary <- summary(mouse_pca)
pca_result <- as.data.frame(pca_summary$cont)
plot_data <- as.data.frame(t(pca_result[c("Proportion Explained"),]))
plot_data$component <- c(1:75)
head(pca_summary$cont[2,])
pca_summary <- summary(mouse_pca)
pca_result <- as.data.frame(pca_summary$cont)
plot_data <- as.data.frame(t(pca_result[c("Proportion Explained"),]))
plot_data$component <- c(1:75)
ggplot(plot_data, aes(component , `Proportion Explained`)) + geom_bar(stat = "identity") + theme_bw()
View(pca_summary)
View(pca_result)
pca_summary <- summary(mouse_pca)
pca_result <- as.data.frame(pca_summary$cont)
plot_data <- as.data.frame(t(pca_result[c("Proportion Explained"),]))
plot_data$component <- c(1:75)
ggplot(plot_data, aes(component , `Proportion Explained`)) + geom_bar(stat = "identity") + theme_bw()
pca_summary <- summary(mouse_pca)
pca_result <- as.data.frame(pca_summary$cont)
plot_data <- as.data.frame(t(pca_result[c("Proportion Explained"),]))
plot_data$component <- c(1:75)
ggplot(plot_data, aes(component , `Proportion Explained`)) + geom_bar(stat = "identity") +ggtitle(label = "Component contribution")
screeplot(mouse_pca, type = "lines", bstick = TRUE) # график собственных чисел
biplot(mouse_pca, scaling = "species", scaling = 2, choices = c(1,2))
biplot(mouse_pca, display = "species", scaling = 2, choices = c(1,2))
biplot(mouse_pca, display = "species", scaling = 2, choices = c(1,4))
biplot(mouse_pca, display = "species", scaling = 2, choices = c(2,3))
biplot(mouse_pca, display = "species", scaling = 2, choices = c(2,4))
biplot(mouse_pca, display = "species", scaling = 2, choices = c(3,4))
install.packages("plot3D")
library("readxl")
library(dplyr)
library(tidyr)
library(stats)
library(ggplot2)
library(car)
library(knitr)
library(rstatix)
library(evaluator)
library(multcomp)
library(vegan)
library(plot3D)
theme_set(theme_bw())
scatter3D( df_scores ,x = ~PC1, y = ~PC2, z = ~PC3, color = class)
scatter3D( df_scores ,x = ~PC1, y = ~PC2, z = ~PC3, color = class, marker =list(size = 2.5))
?scatter3D
scatter3D( df_scores ,x = ~PC1, y = ~PC2, z = ~PC3, colkey = class, marker =list(size = 2.5))
scatter3D( df_scores ,x = ~PC1, y = ~PC2, z = ~PC3, colkey = class)
scatter3D( df_scores ,x = ~PC1, y = ~PC2, z = ~PC3, colkey = class, type = "l")
scatter3D( df_scores ,x = ~PC1, y = ~PC2, z = ~PC3, colkey = class, type = "o")
scatter3D( df_scores ,x = PC1, y = PC2, z = PC3, colkey = class)
install.packages("plotly")
install.packages("plotly")
install.packages("plotly")
install.packages("plotly")
library(plotly)
?plotly::
?plotly
??plotly
library("readxl")
library(dplyr)
library(tidyr)
library(stats)
library(ggplot2)
library(car)
library(knitr)
library(rstatix)
library(evaluator)
library(multcomp)
library(vegan)
library(plotly)
install.packages("plotly")
library("readxl")
library(dplyr)
library(tidyr)
library(stats)
library(ggplot2)
library(car)
library(knitr)
library(rstatix)
library(evaluator)
library(multcomp)
library(vegan)
library(plotly)
#scatter3D( df_scores ,x = PC1, y = PC2, z = PC3, colkey = class)
ggplot(df_scores, aes(x = PC1, y = PC2, z = PC3, color=class)) +
theme_void() +
axes_3D() +
stat_3D()
install.packages("rgl")
library("readxl")
library(dplyr)
library(tidyr)
library(stats)
library(ggplot2)
library(car)
library(knitr)
library(rstatix)
library(evaluator)
library(multcomp)
library(vegan)
library(rgl)
theme_set(theme_bw())
#scatter3D( df_scores ,x = PC1, y = PC2, z = PC3, colkey = class)
ggplot(df_scores, aes(x = PC1, y = PC2, z = PC3, color=class)) +
theme_void() +
axes_3D() +
stat_3D()
??rgl
#scatter3D( df_scores ,x = PC1, y = PC2, z = PC3, colkey = class)
ggplot(df_scores, aes(x = PC1, y = PC2, z = PC3, color=class)) +
theme_void() +
axes3d() +
stat_3D()
#scatter3D( df_scores ,x = PC1, y = PC2, z = PC3, colkey = class)
ggplot(df_scores, aes(x = PC1, y = PC2, z = PC3, color=class)) +
theme_void() +
axes3d() +
stat3d()
install.packages("plotly")
#scatter3D( df_scores ,x = PC1, y = PC2, z = PC3, colkey = class)
plotly
library("readxl")
library(dplyr)
library(tidyr)
library(stats)
library(ggplot2)
library(car)
library(knitr)
library(rstatix)
library(evaluator)
library(multcomp)
library(vegan)
library(rgl)
library(plotly)
install.packages(c("backports", "BH", "boot", "brio", "broom", "caTools", "class", "cli", "cowplot", "cpp11", "crayon", "data.table", "DBI", "dbplyr", "diffobj", "dplyr", "fansi", "fastmap", "forcats", "GGally", "ggplot2", "ggrepel", "ggridges", "gridGraphics", "hms", "htmltools", "httpuv", "jsonlite", "knitr", "lifecycle", "MASS", "matrixStats", "memoise", "mgcv", "mime", "nlme", "nnet", "pbkrtest", "pillar", "pkgbuild", "promises", "psych", "quantreg", "Rcpp", "RcppArmadillo", "RcppEigen", "reprex", "rlang", "rmarkdown", "robustbase", "RSQLite", "shiny", "sp", "SparseM", "spatial", "testthat", "tibble", "tinytex", "vctrs", "waldo", "withr", "xfun"))
install.packages(c("backports", "BH", "boot", "brio", "broom", "caTools", "class", "cli", "cowplot", "cpp11", "crayon", "data.table", "DBI", "dbplyr", "diffobj", "dplyr", "fansi", "fastmap", "forcats", "GGally", "ggplot2", "ggrepel", "ggridges", "gridGraphics", "hms", "htmltools", "httpuv", "jsonlite", "knitr", "lifecycle", "MASS", "matrixStats", "memoise", "mgcv", "mime", "nlme", "nnet", "pbkrtest", "pillar", "pkgbuild", "promises", "psych", "quantreg", "Rcpp", "RcppArmadillo", "RcppEigen", "reprex", "rlang", "rmarkdown", "robustbase", "RSQLite", "shiny", "sp", "SparseM", "spatial", "testthat", "tibble", "tinytex", "vctrs", "waldo", "withr", "xfun"))
install.packages(c("backports", "BH", "boot", "brio", "broom", "caTools", "class", "cli", "cowplot", "cpp11", "crayon", "data.table", "DBI", "dbplyr", "diffobj", "dplyr", "fansi", "fastmap", "forcats", "GGally", "ggplot2", "ggrepel", "ggridges", "gridGraphics", "hms", "htmltools", "httpuv", "jsonlite", "knitr", "lifecycle", "MASS", "matrixStats", "memoise", "mgcv", "mime", "nlme", "nnet", "pbkrtest", "pillar", "pkgbuild", "promises", "psych", "quantreg", "Rcpp", "RcppArmadillo", "RcppEigen", "reprex", "rlang", "rmarkdown", "robustbase", "RSQLite", "shiny", "sp", "SparseM", "spatial", "testthat", "tibble", "tinytex", "vctrs", "waldo", "withr", "xfun"))
install.packages(c("backports", "BH", "boot", "brio", "broom", "caTools", "class", "cli", "cowplot", "cpp11", "crayon", "data.table", "DBI", "dbplyr", "diffobj", "dplyr", "fansi", "fastmap", "forcats", "GGally", "ggplot2", "ggrepel", "ggridges", "gridGraphics", "hms", "htmltools", "httpuv", "jsonlite", "knitr", "lifecycle", "MASS", "matrixStats", "memoise", "mgcv", "mime", "nlme", "nnet", "pbkrtest", "pillar", "pkgbuild", "promises", "psych", "quantreg", "Rcpp", "RcppArmadillo", "RcppEigen", "reprex", "rlang", "rmarkdown", "robustbase", "RSQLite", "shiny", "sp", "SparseM", "spatial", "testthat", "tibble", "tinytex", "vctrs", "waldo", "withr", "xfun"))
install.packages(c("backports", "BH", "boot", "brio", "broom", "caTools", "class", "cli", "cowplot", "cpp11", "crayon", "data.table", "DBI", "dbplyr", "diffobj", "dplyr", "fansi", "fastmap", "forcats", "GGally", "ggplot2", "ggrepel", "ggridges", "gridGraphics", "hms", "htmltools", "httpuv", "jsonlite", "knitr", "lifecycle", "MASS", "matrixStats", "memoise", "mgcv", "mime", "nlme", "nnet", "pbkrtest", "pillar", "pkgbuild", "promises", "psych", "quantreg", "Rcpp", "RcppArmadillo", "RcppEigen", "reprex", "rlang", "rmarkdown", "robustbase", "RSQLite", "shiny", "sp", "SparseM", "spatial", "testthat", "tibble", "tinytex", "vctrs", "waldo", "withr", "xfun"))
library(plotly)
install.packages("plotly")
library(plotly)
install.packages("ggplot2")
library(plotly)
install.packages("ggplot2", "plotly", lib = '/home/karina_mermaid/R/x86_64-pc-linux-gnu-library/3.6')
library(plotly)
library("readxl")
library(dplyr)
library("readxl")
library(dplyr)
install.packages("stringi", dependencies=TRUE, INSTALL_opts = c('--no-lock'))
install.packages("stringi", dependencies = TRUE, INSTALL_opts = c("--no-lock"))
install.packages("stringi", dependencies = TRUE, INSTALL_opts = c("--no-lock"))
library("readxl")
library(dplyr)
library(tidyr)
library(stats)
library(ggplot2)
library(car)
library(knitr)
library(rstatix)
library(evaluator)
library(multcomp)
library(vegan)
library(rgl)
library(plotly)
library(pca3d)
library(plotly)
??plotly
plot3d(df_scores[1:3],col= class,size=6)
plot3d(df_scores[1:3],col= 'class',size=6)
plot3d(mouse_pca[1:3],col= 'class',size=6)
plot3d(mouse_pca[1:3],col= col',size=6)
plot3d(mouse_pca[1:3],col= col,size=6)
View(df_scores)
x1 <- df_scores$PC1
y1 <- df_scores$PC2
z1 <- df_scores$PC3
rgl_init()
library("readxl")
library(dplyr)
library(tidyr)
library(stats)
library(ggplot2)
library(car)
library(knitr)
library(rstatix)
library(evaluator)
library(multcomp)
library(vegan)
library(rgl)
library(plotly)
theme_set(theme_bw())
x1 <- df_scores$PC1
y1 <- df_scores$PC2
z1 <- df_scores$PC3
rgl_init()
library("readxl")
library(dplyr)
library(tidyr)
library(stats)
library(ggplot2)
library(car)
library(knitr)
library(rstatix)
library(evaluator)
library(multcomp)
library(vegan)
library(rgl)
library(plotly)
library("plot3D")
theme_set(theme_bw())
x1 <- df_scores$PC1
y1 <- df_scores$PC2
z1 <- df_scores$PC3
scatter3D(x1, y1, z1)
x1 <- df_scores$PC1
y1 <- df_scores$PC2
z1 <- df_scores$PC3
scatter3D(x1, y1, z1, col = class)
x1 <- df_scores$PC1
y1 <- df_scores$PC2
z1 <- df_scores$PC3
scatter3D(x1, y1, z1, col = df_scores$class)
x1 <- df_scores$PC1
y1 <- df_scores$PC2
z1 <- df_scores$PC3
scatter3D(df_scores, x1, y1, z1, col = class)
str(df_scores)
x1 <- df_scores$PC1
y1 <- df_scores$PC2
z1 <- df_scores$PC3
scatter3D( x1, y1, z1, col = df_scores$class)
x1 <- df_scores$PC1
y1 <- df_scores$PC2
z1 <- df_scores$PC3
scatter3D( x1, y1, z1, col = df_scores$class)
#scatter3D( df_scores ,x = PC1, y = PC2, z = PC3, colkey = class)
plotly(df_scores, x1 =~PC1, y1 = ~PC2, z = ~PC3, color = class )
#scatter3D( df_scores ,x = PC1, y = PC2, z = PC3, colkey = class)
plotly(df_scores, x1 =~PC1, y1 = ~PC2, z = ~PC3, color = ~class )
#scatter3D( df_scores ,x = PC1, y = PC2, z = PC3, colkey = class)
plot_ly(df_scores, x1 =~PC1, y1 = ~PC2, z = ~PC3, color = ~class )
#scatter3D( df_scores ,x = PC1, y = PC2, z = PC3, colkey = class)
fig <-  plot_ly(df_scores, x1 =~PC1, y1 = ~PC2, z = ~PC3, color = ~class )
#scatter3D( df_scores ,x = PC1, y = PC2, z = PC3, colkey = class)
fig <-  plot_ly(df_scores, x1 =~PC1, y1 = ~PC2, z = ~PC3, color = ~class )
fig <-  plot_ly(df_scores, x1 =~PC1, y1 = ~PC2, z = ~PC3, color = ~class )
fig <-  plot_ly(df_scores, x1 =~PC1, y1 = ~PC2, z = ~PC3, color = ~class )
fig
fig <-  plot_ly(df_scores, x =~PC1, y = ~PC2, z = ~PC3, color = ~class )
fig
fig <-  plot_ly(df_scores, x =~PC1, y = ~PC2, z = ~PC3, color = ~class, size = 0.2  )
fig
df_scores <- data.frame(mice_set,
scores(mouse_pca, display = "sites", choices = c(1:5), scaling = 1))
ggplot(df_scores, aes(x = PC4, y = PC2, colour = class)) +
geom_point() + ggtitle("Ordination in PC4 and PC2 space")
fig <-  plot_ly(df_scores, x =~PC1, y = ~PC2, z = ~PC3, color = ~class, size = 0.2  )
fig
fig <-  plot_ly(df_scores, x =~PC1, y = ~PC2, z = ~PC3, color = ~class, size = 0.1  )
library("readxl")
library(dplyr)
library(tidyr)
library(stats)
library(ggplot2)
library(car)
library(knitr)
library(rstatix)
library(evaluator)
library(multcomp)
library(vegan)
library(plotly)
fig <-  plot_ly(df_scores, x =~PC1, y = ~PC2, z = ~PC3, color = ~class, size = 0.1  )
fig
